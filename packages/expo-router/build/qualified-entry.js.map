{"version":3,"file":"qualified-entry.js","sourceRoot":"","sources":["../src/qualified-entry.tsx"],"names":[],"mappings":";AAAA,sEAAsE;AACtE,wBAAwB;;;;;;AAExB,kDAA0B;AAC1B,qEAAqE;AAErE,0DAA4D;AAC5D,8EAAqE;AACrE,gDAA6C;AAC7C,yDAAsD;AACtD,qCAAsD;AAEtD,2BAA2B;AAC3B,SAAS,iBAAiB,CAAC,KAAyB;IAClD,eAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,SAAS,YAAY;YACnB,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,KAAK,CAAC,KAAK,EAAE,CAAC;aACf;QACH,CAAC;QACD,uDAAuD;QACvD,IAAI,OAAO,CAAC,GAAG,CAAC,QAAQ,KAAK,aAAa,EAAE;YAC1C,UAAU,CAAC,6BAA6B,KAAK,EAAE,CAAC;YAChD,MAAM,KAAK,GAAG,UAAU,CAAC,6BAA6B,CAAC,OAAO,CAC5D,UAAU,CAAC,sBAAsB,CAClC,CAAC;YACF,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;gBAChB,UAAU,CAAC,6BAA6B,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,YAAY,CAAC,CAAC;aACzE;iBAAM;gBACL,UAAU,CAAC,6BAA6B,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;aAChE;YACD,UAAU,CAAC,sBAAsB,GAAG,YAAY,CAAC;SAClD;IACH,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;IAE/B,OAAO,CAAC,6BAAa,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,EAAG,CAAC;AACnE,CAAC;AAED,4DAA4D;AAC5D,SAAgB,GAAG;IACjB,OAAO,CACL,CAAC,uCAAe,CACd;MAAA,CAAC,8BAAgB,CACf;QAAA,CAAC,wDAAwD,CACzD;QAAA,CAAC;;;;gBAIO,CACN;UAAA,CAAC,SAAG,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAAC,CAC5B;YAAA,CAAC,eAAM,CAAC,AAAD,EACT;UAAA,EAAE,SAAG,CACP;QAAA,CAAC,yBAAyB,CAC5B;MAAA,EAAE,8BAAgB,CACpB;IAAA,EAAE,uCAAe,CAAC,CACnB,CAAC;AACJ,CAAC;AAjBD,kBAiBC","sourcesContent":["// import { enableScreens, NativeScreen } from 'react-native-screens';\n// enableScreens(false);\n\nimport React from 'react';\n// import { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport { SkipMetaProvider } from './rsc/router/SkipContext';\nimport { LocationContext } from './rsc/router/WindowLocationContext';\nimport { Router } from './rsc/router/client';\nimport { ErrorBoundary } from './views/ErrorBoundary';\nimport { ErrorBoundaryProps, Try } from './views/Try';\n\n// Add root error recovery.\nfunction RootErrorBoundary(props: ErrorBoundaryProps) {\n  React.useEffect(() => {\n    function refetchRoute() {\n      if (props.error) {\n        props.retry();\n      }\n    }\n    // TODO: Only strip when not connected to a dev server.\n    if (process.env.NODE_ENV === 'development') {\n      globalThis.__WAKU_RSC_RELOAD_LISTENERS__ ||= [];\n      const index = globalThis.__WAKU_RSC_RELOAD_LISTENERS__.indexOf(\n        globalThis.__WAKU_REFETCH_ROUTE__\n      );\n      if (index !== -1) {\n        globalThis.__WAKU_RSC_RELOAD_LISTENERS__.splice(index, 1, refetchRoute);\n      } else {\n        globalThis.__WAKU_RSC_RELOAD_LISTENERS__.unshift(refetchRoute);\n      }\n      globalThis.__WAKU_REFETCH_ROUTE__ = refetchRoute;\n    }\n  }, [props.error, props.retry]);\n\n  return <ErrorBoundary error={props.error} retry={props.retry} />;\n}\n\n// Must be exported or Fast Refresh won't update the context\nexport function App() {\n  return (\n    <LocationContext>\n      <SkipMetaProvider>\n        {/* TODO: Add safe area back after it has v74 support. */}\n        {/* <SafeAreaProvider\n          initialMetrics={{\n            frame: { x: 0, y: 0, width: 0, height: 0 },\n            insets: { top: 0, left: 0, right: 0, bottom: 0 },\n          }}> */}\n          <Try catch={RootErrorBoundary}>\n            <Router />\n          </Try>\n        {/* </SafeAreaProvider> */}\n      </SkipMetaProvider>\n    </LocationContext>\n  );\n}\n"]}